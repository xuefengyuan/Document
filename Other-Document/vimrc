" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
" 不要使用vi的键盘模式，而是vim自己的
set nocompatible
" 语法高亮
set syntax=on
" 去掉输入错误的提示声音
set noeb
" 在处理未保存或只读文件的时候，弹出确认
set confirm
" 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
" 不要用空格代替制表符
set noexpandtab
" 在行和段开始处使用制表符
set smarttab
" 显示行号
set number
" 历史记录数
set history=1000
"禁止生成临时文件
set nobackup
set noswapfile
"搜索忽略大小写
set ignorecase
"搜索逐字符高亮
"set hlsearch
set incsearch
"编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn
" 总是显示状态行
set laststatus=2
" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
set selection=exclusive
set selectmode=mouse,key
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
" 为C程序提供自动缩进
set smartindent
set ruler           " 显示标尺  
set showcmd         " 输入的命令显示出来，看的清楚些  

if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


"""""""""""""新建文件标题"""""""""""""""

"新建.c,.h,.sh,.java 文件时,自动插入头文件
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 

"定义函数 Setitle, 自动插入头文件
func SetTitle() 
    "如果文件类型为.sh  
    "if &filetype == 'sh' 
    "    call setline(1,"\#########################################################################") 
    "    call append(line("."), "\# File Name: ".expand("%")) 
    "    call append(line(".")+1, "\# Author: afei") 
    "    call append(line(".")+2, "\# mail: afei@126.com") 
    "    call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
    "    call append(line(".")+4, "\#########################################################################") 
    "    call append(line(".")+5, "\#!/bin/bash") 
    "    call append(line(".")+6, "") 
    "else 
    "    call setline(1, "/*************************************************************************") 
    "    call append(line("."), "    > File Name: ".expand("%")) 
    "    call append(line(".")+1, "    > Author: afei") 
    "    call append(line(".")+2, "    > Mail: afei@163.com ") 
    "    call append(line(".")+3, "    > Created Time: ".strftime("%c")) 
    "    call append(line(".")+4, " ************************************************************************/") 
    "    call append(line(".")+5, "")
    "endif
   
    "如果文件类型为.cpp
    if &filetype == 'cpp'
        call setline(1, "#include <iostream>")
        call append(line("."), "#include<string>")
        call append(line(".")+1, "using namespace std;")
        call append(line(".")+2, "")
        call append(line(".")+3, "int main(int argc, char *argv[])")
        call append(line(".")+4, "{")
        call append(line(".")+5, "")
        call append(line(".")+6, "\treturn 0;")
        call append(line(".")+7, "}")
    endif

    "如果文件类型为.c
    if &filetype == 'c'
        call setline(1, "#include <stdio.h>")
        call append(line("."), "#include <stdlib.h>")
        call append(line(".")+1, "#include <string.h>")
        call append(line(".")+2, "#include <unistd.h>")
        call append(line(".")+3, "#include <errno.h>")
        call append(line(".")+4, "#include <pthread.h>")
        call append(line(".")+5, "")
    
       call append(line(".")+6, "void sys_err(const char *str)")
       call append(line(".")+7, "{")
       call append(line(".")+8, "\tperror(str);")
       call append(line(".")+9, "\texit(1);")
       call append(line(".")+10, "}")

"        call append(line(".")+6, "void err_thread(int ret, char *str)")
"        call append(line(".")+7, "{")
"        call append(line(".")+8, "\tif (ret != 0) {")
"        call append(line(".")+9, "\t\tfprintf(stderr, \"%s:%s\\n\", str, strerror(ret));")
 "       call append(line(".")+10, "\t\tpthread_exit(NULL);")
  "      call append(line(".")+11, "\t}")
   "     call append(line(".")+12, "}")

        call append(line(".")+11, "")
        call append(line(".")+12, "int main(int argc, char *argv[])")
        call append(line(".")+13, "{")
        call append(line(".")+14, "")
        call append(line(".")+15, "\treturn 0;")
        call append(line(".")+16, "}")
    endif

    "自动将光标定位到末尾
    autocmd BufNewFile * normal G

endfunc


